# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

def mergeRequests(builder, req1, req2):
    "any requests with the same branch can be merged"
    return req1.source.branch == req2.source.branch

c['mergeRequests'] = mergeRequests

####### Log horizons

c['changeHorizon'] = 100
c['buildHorizon'] = 100
c['eventHorizon'] = 50
c['logHorizon'] = 50
c['changeCacheSize'] = 1000
c['buildCacheSize'] = 5

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("server", "MySlav3Pa55W0rd", max_builds=1),
	BuildSlave("saturn", "MySlav3Pa55W0rd", max_builds=1),
	BuildSlave("hyperion", "MySlav3Pa55W0rd", max_builds=1),
	BuildSlave("titan", "MySlav3Pa55W0rd", max_builds=1),
	BuildSlave("desktop", "MySlav3Pa55W0rd", max_builds=1),
	BuildSlave("jupiter", "MySlav3Pa55W0rd", max_builds=1),
	BuildSlave("mars", "MySlav3Pa55W0rd", max_builds=1),
	BuildSlave("minecraft", "MySlav3Pa55W0rd", max_builds=1)]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.forcesched import FixedParameter
from buildbot.changes import filter
c['schedulers'] = []

####### LOCKS

from buildbot import locks

build_lock = locks.SlaveLock("slave_builds", maxCount = 1,
		maxCountForSlave = {
			'server' : 1,
			'saturn' : 1,
			'hyperion' : 1,
			'titan' : 1,
			'desktop' : 1,
			'jupiter' : 1,
			'mars' : 1,
			'minecraft' : 1
		})

####### BUILD CONFIGURATION

# repositories

hwmon_repo = 'git://server.roeck-us.net/git/linux.git'
mainline_repo = 'git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git'
stable_repo = 'git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git'
stable_local_repo = 'git://server.roeck-us.net/git/linux-stable.git'
next_repo = 'git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git'
mmotm_repo = 'git://git.cmpxchg.org/linux-mmotm.git'

# stable quilt queues

stable_queue = 'git://git.kernel.org/pub/scm/linux/kernel/git/stable/stable-queue.git'
stable_32_queue = 'git://git.kernel.org/pub/scm/linux/kernel/git/bwh/linux-stable-queue.git'
stable_34_queue = 'git://git.kernel.org/pub/scm/linux/kernel/git/lizf/linux-3.4.y-queue.git'

# hwmon, watchdog, smatch

hwmon_branches_only = [ 'hwmon', 'hwmon-next', 'hwmon-staging' ]
# watchdog_branches_only = [ 'watchdog-next', 'dsa' ]
watchdog_branches_only = [ 'watchdog-next' ]
# watchdog_branches_only = [ 'watchdog-next', 'testing' ]
master_branch = [ 'master' ]
hwmon_branches = hwmon_branches_only + watchdog_branches_only + master_branch
smatch_branches = hwmon_branches_only
hwmon_slaves = [ 'server', 'desktop', 'saturn', 'jupiter', 'mars', 'minecraft' ]

# stable

stable_branches = [ '3.2', '3.4', '3.10', '3.12', '3.14', '3.16', '3.18',
		'4.1', '4.4', '4.6',
		'next' ]
# dropped mmotm above
stable_upstream_branches = [ 'master', 'linux-3.2.y',
		'linux-3.4.y', 'linux-3.10.y', 'linux-3.12.y',
		'linux-3.14.y', 'linux-3.16.y', 'linux-3.18.y',
		'linux-4.1.y', 'linux-4.4.y',
		'linux-4.6.y' ]
stable_queue_branches = [ 'linux-3.2.y.queue', 'linux-3.4.y.queue',
		'linux-3.10.y.queue', 'linux-3.12.y.queue',
		'linux-3.14.y.queue', 'linux-3.16.y.queue', 'linux-3.18.y.queue',
		'linux-4.1.y.queue', 'linux-4.4.y.queue',
		'linux-4.6.y.queue' ]
stable_slaves = [ 'server', 'desktop', 'saturn', 'jupiter', 'mars' ]
qemu_slaves = [ 'server', 'desktop', 'hyperion', 'titan', 'saturn', 'jupiter', 'mars' ]

stable_arches = [ 'alpha', 'arc', 'arcv2', 'arm', 'arm64', 'avr32',
		'blackfin',
		'c6x', 'cris', 'crisv32', 'frv',
		'h8300', 'hexagon', 'i386', 'ia64', 'm32r', 'm68k',
		'm68k_nommu', 'metag', 'microblaze', 'mips_22', 'mips_24', 'mips_25', 'mn10300',
		'nios2', 'openrisc', 'parisc', 'parisc64', 'powerpc',
		's390', 'score', 'sh', 'sparc32', 'sparc64', 'tile',
		'x86_64', 'xtensa',
		'um', 'unicore32' ]

skip_stable_builders = [ 'stable-queue-arc-3.2', 'stable-queue-arc-3.4',
		'stable-queue-arcv2-3.2', 'stable-queue-arcv2-3.4',
		'stable-queue-arcv2-3.12', 'stable-queue-arcv2-3.10',
		'stable-queue-arcv2-3.14', 'stable-queue-arcv2-3.16',
		'stable-queue-arcv2-3.18', 'stable-queue-arcv2-4.1',
		'stable-queue-arm64-3.2', 'stable-queue-arm64-3.4',
		'stable-queue-c6x-3.2',
		'stable-queue-metag-3.2', 'stable-queue-metag-3.4',
		'stable-queue-nios2-3.2', 'stable-queue-nios2-3.4',
		'stable-queue-nios2-3.10', 'stable-queue-nios2-3.12',
		'stable-queue-nios2-3.14', 'stable-queue-nios2-3.16',
		'stable-queue-nios2-3.18',
		'stable-queue-h8300-3.2', 'stable-queue-h8300-3.4',
		'stable-queue-h8300-3.10', 'stable-queue-h8300-3.12',
		'stable-queue-h8300-3.14', 'stable-queue-h8300-3.16',
		'stable-queue-h8300-3.18',
		'stable-queue-h8300-4.1',
		'stable-queue-mips_24-3.2', 'stable-queue-mips_24-3.4',
		'stable-queue-mips_25-3.2', 'stable-queue-mips_25-3.4',
		'stable-queue-mips_25-3.10', 'stable-queue-mips_25-3.12',
		'stable-queue-mips_25-3.14', 'stable-queue-mips_25-3.16',
		'stable-queue-xtensa-3.2'
		]

qemu_targets_32 = [ 'alpha', 'arm',
		'microblaze', 'mips', 'mipsel', 'mips64', 'mipsel64',
		'openrisc', 'ppc', 'ppc64',
		'sh', 'sparc', 'sparc64',
		'x86', 'x86_64' ]
qemu_targets_34 = qemu_targets_32 + [ 'sheb' ]
qemu_targets_310 = qemu_targets_34 + [ 's390', 'metag', 'microblazeel' ]
qemu_targets_312 = qemu_targets_310
qemu_targets_314 = qemu_targets_312 + [ 'arm64', 'xtensa' ]
qemu_targets_316 = qemu_targets_314
qemu_targets_318 = qemu_targets_314
qemu_targets_41 = qemu_targets_318 + [ 'crisv32' ]
qemu_targets_44 = qemu_targets_41
qemu_targets_46 = qemu_targets_44
qemu_targets_master = qemu_targets_46
qemu_targets_next = qemu_targets_master
qemu_targets_mmotm = qemu_targets_master

####### BUILDERS

def getBuilderPriority(builder):
    try:
        return builder.config.properties.get("priority", 0)
    except Exception as e:
	return 5

def prioritizeBuilders(buildmaster, builders):
    builders.sort(key=getBuilderPriority)
    return builders

c['prioritizeBuilders'] = prioritizeBuilders

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
# from buildbot.steps.shell import Test
from buildbot.config import BuilderConfig
from buildbot.process.buildstep import LogLineObserver
from buildbot.status.builder import SUCCESS,WARNINGS,FAILURE,EXCEPTION,RETRY,SKIPPED

c['builders'] = []
force = []
force_updates = []

import re

passed = re.compile('Building (\S+):(\S+) \.\.\. passed$')
failed = re.compile('Building (\S+):(\S+) \.\.\. failed$')
skipped = re.compile('Building (\S+):(\S+) \.\.\. failed \(\S+\)')

passed_qemu = re.compile('Building (\S+):(\S+) \.+ running \.+ passed$')
failed_qemu = re.compile('Building (\S+):(\S+) .*?failed.*$')
skipped_qemu = re.compile('Building (\S+):(\S+) \.+ skipped$')

def prevFailed(step):
    allSteps = step.build.getStatus().getSteps()
    sprev = allSteps[-1]
    for s in allSteps:
        (started, finished) = s.getTimes()
        if started and finished:
            sprev = s
        else:
            break
    result = sprev.getResults()[0]
    return result in (FAILURE, EXCEPTION, RETRY)

def lastStep(step):
    allSteps = step.build.getStatus().getSteps()
    last = allSteps[-1]
    (started, finished) = last.getTimes()
    return started

class RefShellCommand(ShellCommand):
    name = "buildcommand"
    command = [name]

    def __init__(self, **kwargs):
        ShellCommand.__init__(self, **kwargs)   # always upcall!
	self.ref = None
	self.traceback = False

    def createSummary(self, log):
        s = re.search("^Build reference: (\S+)$", log.getText(), re.MULTILINE)
	if s:
	    self.ref = s.group(1)
        s = re.search("\[ cut here \]", log.getText(), re.MULTILINE)
	if s:
	    self.traceback = True
        s = re.search("stack backtrace", log.getText(), re.MULTILINE)
	if s:
	    self.traceback = True

    def getText(self, cmd, results):
        if results != SKIPPED:
            text = ShellCommand.getText(self, cmd, results)
	else:
	    text = [ "skipped" ]
	if self.ref:
	    text.append(self.ref)
        return text

    def getText2(self, cmd, results):
        text = [ ]
	if self.ref:
	    text.append(self.ref)
        return text

    def maybeGetText2(self, cmd, results):
        # Add build reference if this step has been successful,
	# or if the previous step failed.
	text = [ ]
        if results == SUCCESS or results == WARNINGS:
	    text = [ "<br/>" ]
            text.extend(self.getText2(cmd, results))
	elif lastStep(self):
	    text = [ "<br/>" ]
	    text.extend(self.getText2(cmd, results))
        return text

    def evaluateCommand(self, cmd):
	if cmd.didFail():
	    return FAILURE
	if self.traceback:
	    return WARNINGS
	return SUCCESS

class AnalyzeBuildLog(LogLineObserver):
    def __init__(self, **kwargs):
        LogLineObserver.__init__(self, **kwargs)   # always upcall!
        self.numTotal = 0
        self.numPassed = 0
        self.numFailed = 0
        self.numSkipped = 0
        self.failed = []
    def outLineReceived(self, line):
	# Look for:
	# Building <arch>:<config> ... passed
	# Building <arch>:<config> ... failed
	# Building <arch:<config> ... failed (config) - skipping
        if line.startswith("Building "):
            self.numTotal += 1
	    if passed.match(line):
                self.numPassed += 1
                self.step.setProgress('pass', self.numPassed)
	    if failed.match(line):
                self.numFailed += 1
                self.step.setProgress('fail', self.numFailed)
                self.failed.append(failed.findall(line))
	    if skipped.match(line):
                self.numSkipped += 1
                self.step.setProgress('skipped', self.numSkipped)

class StableBuildCommand(RefShellCommand):
    name = "buildcommand"
    command = [name]

    def __init__(self, **kwargs):
        RefShellCommand.__init__(self, **kwargs)   # always upcall!
        self.counter = AnalyzeBuildLog()
        self.addLogObserver('stdio', self.counter)
        self.progressMetrics += ('builds', 'pass', 'fail', 'skipped',)

    def getText(self, cmd, results):
        text = RefShellCommand.getText(self, cmd, results)
	# if results == SKIPPED:
	#     return text
	text.append("total: " + str(self.counter.numTotal))
        if self.counter.numPassed > 0:
            text.append("pass: " + str(self.counter.numPassed))
        if self.counter.numSkipped > 0:
            text.append("skipped: " + str(self.counter.numSkipped))
        if self.counter.numFailed > 0:
            text.append("fail: " + str(self.counter.numFailed))
	    # text.append("<!-- [")
            # for elem in self.counter.failed:
	    #     text.append(str(elem[0][0]) + ":" + str(elem[0][1]) + " ")
	    # text.append("] -->")
        return text

    def getText2(self, cmd, results):
        text = RefShellCommand.getText2(self, cmd, results)
	# if results == SKIPPED:
	#     return text
	text.append("<br>");
	text.append("total: " + str(self.counter.numTotal))
        if self.counter.numPassed > 0:
            text.append("pass: " + str(self.counter.numPassed))
        if self.counter.numSkipped > 0:
            text.append("skipped: " + str(self.counter.numSkipped))
        if self.counter.numFailed > 0:
            text.append("fail: " + str(self.counter.numFailed))
	    text.append("<!-- ")
            for elem in self.counter.failed:
	        text.append(str(elem[0][0]) + ":" + str(elem[0][1]) + " ")
	    text.append("-->")
        return text

    def maybeGetText2(self, cmd, results):
    	return self.getText2(cmd, results)

    def evaluateCommand(self, cmd):
        if self.counter.numFailed > 0:
	    if self.counter.numPassed == 0:
	        return FAILURE
            return WARNINGS
        else:
	    if self.counter.numPassed == 0:
	        self.build.result = SKIPPED
		return SKIPPED
            return SUCCESS

class AnalyzeQemuBuildLog(LogLineObserver):
    def __init__(self, **kwargs):
        LogLineObserver.__init__(self, **kwargs)   # always upcall!
        self.numTotal = 0
        self.numPassed = 0
        self.numFailed = 0
        self.numSkipped = 0
        self.failed = []
    def outLineReceived(self, line):
	# Look for:
	# Building <arch>:<config> .+ running .+ passed
	# Building <arch>:<config> .* failed.*
        if passed_qemu.match(line) or failed_qemu.match(line) or skipped_qemu.match(line):
            self.numTotal += 1
	    if passed_qemu.match(line):
                self.numPassed += 1
                self.step.setProgress('pass', self.numPassed)
	    if failed_qemu.match(line):
                self.numFailed += 1
                self.step.setProgress('fail', self.numFailed)
                self.failed.append(failed_qemu.findall(line))
            if skipped_qemu.match(line):
	        self.numSkipped += 1
                self.step.setProgress('skipped', self.numSkipped)

class QemuBuildCommand(RefShellCommand):
    name = "qemubuildcommand"
    command = [name]

    def __init__(self, **kwargs):
        RefShellCommand.__init__(self, **kwargs)   # always upcall!
        self.counter = AnalyzeQemuBuildLog()
        self.addLogObserver('stdio', self.counter)
        self.progressMetrics += ('builds', 'pass', 'fail', 'skipped', )

    def getText(self, cmd, results):
        text = RefShellCommand.getText(self, cmd, results)
	# if results == SKIPPED:
	#     return text
	text.append("total: " + str(self.counter.numTotal))
        if self.counter.numPassed > 0:
            text.append("pass: " + str(self.counter.numPassed))
        if self.counter.numSkipped > 0:
            text.append("skipped: " + str(self.counter.numSkipped))
        if self.counter.numFailed > 0:
            text.append("fail: " + str(self.counter.numFailed))
	    # text.append("<!-- [")
            # for elem in self.counter.failed:
	    #     text.append(str(elem[0][0]) + ":" + str(elem[0][1]) + " ")
	    # text.append("] -->")
        return text

    def getText2(self, cmd, results):
        text = RefShellCommand.getText2(self, cmd, results)
	# if results == SKIPPED:
	#     return text
	text.append("<br>");
	text.append("total: " + str(self.counter.numTotal))
        if self.counter.numPassed > 0:
            text.append("pass: " + str(self.counter.numPassed))
        if self.counter.numSkipped > 0:
            text.append("skipped: " + str(self.counter.numSkipped))
        if self.counter.numFailed > 0:
            text.append("fail: " + str(self.counter.numFailed))
	    text.append("<!-- ")
            for elem in self.counter.failed:
	        text.append(str(elem[0][0]) + ":" + str(elem[0][1]) + " ")
	    text.append("-->")
        return text

    def maybeGetText2(self, cmd, results):
	return self.getText2(cmd, results)

    def evaluateCommand(self, cmd):
        result = RefShellCommand.evaluateCommand(self, cmd)
        if self.counter.numFailed > 0:
	    if self.counter.numPassed == 0:
	        return FAILURE
            return WARNINGS
        else:
	    if self.counter.numPassed == 0:
	        self.build.result = SKIPPED
		return SKIPPED
            return result

def isSkipped(result, s):
     return (result == SKIPPED)

def isSuccess(result, s):
     return (result == SUCCESS)

# hwmon builds (source verification)

c['change_source'].append(GitPoller(
        hwmon_repo, project='hwmon', workdir='hwmon-workdir',
	branches=hwmon_branches, pollinterval=1051, usetimestamps=False))

for branch in smatch_branches:
    c['schedulers'].append(SingleBranchScheduler(
		name=branch,
		change_filter=filter.ChangeFilter(project='hwmon', branch=branch),
		treeStableTimer=600,
		builderNames=[ branch ]))
    force.append(branch)
    f = BuildFactory()
    f.addStep(Git(repourl=hwmon_repo, branch=branch, mode='full',
    		hideStepIf=isSuccess))
    f.addStep(ShellCommand(timeout=3600,
		description='building',
		descriptionDone='complete',
		command=["hwmon-build.sh"],
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))
    c['builders'].append(
    	BuilderConfig(name=branch,
		slavenames=hwmon_slaves,
		factory=f,
		properties={"priority": 2},
		locks=[build_lock.access('counting')]))

# stable, mmotm, and next builds

# Poll hourly. Not updated very often,
c['change_source'].append(GitPoller(
        mmotm_repo, project='mmotm', workdir='mmotm-workdir',
	branch='master', pollinterval=3623, usetimestamps=False))

# Poll next every other hour.
# Note: Reduce to weekly after commit window closes
c['change_source'].append(GitPoller(
        next_repo, project='next', workdir='next-workdir',
	branch='master', pollinterval=7057, usetimestamps=False))

c['change_source'].append(GitPoller(
        stable_local_repo, project='stable-queue', workdir='stable-workdir',
	branches=stable_queue_branches, pollinterval=587, usetimestamps=False))

# c['change_source'].append(GitPoller(
#         hwmon_repo, project='hwmon-builds', workdir='hwmon-builds-workdir',
# 	branches=hwmon_branches_only, pollinterval=587))

for b in stable_branches + hwmon_branches:
    builders = []
    force_branch = []
    if b in hwmon_branches:
        branch = b
	repo = hwmon_repo
	# proj = "hwmon-builds"
	proj = "hwmon"
    elif b == 'mmotm':
        branch = 'master'
	repo = mmotm_repo
	proj = "mmotm"
    elif b == 'next':
        branch = 'master'
	repo = next_repo
	proj = "next"
    else:
        branch = "linux-%s.y.queue" % b
	repo = stable_local_repo
	proj = "stable-queue"
    sname = "%s-%s" % (proj, b)
    for arch in stable_arches:
        name = "%s-%s-%s" % (proj, arch, b)
	if name in skip_stable_builders:
	    continue
        builddir = "%s-%s" % (proj, b)
        builders.append(name)
        force.append(name)
        force_branch.append(name)
        f = BuildFactory()
        f.addStep(Git(repourl=repo, branch=branch, mode='full',
		hideStepIf=isSuccess))
        f.addStep(StableBuildCommand(timeout=3600,
    		description='building',
		descriptionDone='complete',
		command=["stable-build-arch.sh", arch],
		env={'PATH': "/opt/buildbot/bin:${PATH}"},
		warnOnWarnings=True))
        c['builders'].append(
		BuilderConfig(name=name, slavenames=stable_slaves, factory=f,
			slavebuilddir=builddir,
			properties={"priority": 3},
			locks=[build_lock.access('counting')]))
    if b in hwmon_branches:
    	qemu_targets = qemu_targets_master
    else:
    	qemu_targets = eval("qemu_targets_%s" % b.replace('.', ''))
    for t in qemu_targets:
	f = BuildFactory()
	cmd = "run-qemu-%s.sh" % t
	path = "/opt/buildbot/rootfs/%s:${PATH}" % t
	tname = "qemu-%s-%s" % (t, b)
	tbuilddir = "qemu-%s" % b
	builders.append(tname)
	force.append(tname)
	force_branch.append(tname)
	f.addStep(Git(repourl=repo, branch=branch, mode='full',
		haltOnFailure=True, hideStepIf=isSuccess))
	f.addStep(QemuBuildCommand(timeout=1200,
		description='running',
		descriptionDone='complete',
		command=[ cmd ], env={'PATH': path},
		warnOnWarnings=True))
	c['builders'].append(
		BuilderConfig(name=tname, slavenames=qemu_slaves, factory=f,
			slavebuilddir=tbuilddir,
			properties={"priority": 4},
			locks=[build_lock.access('counting')]))

    c['schedulers'].append(SingleBranchScheduler(
		name=sname,
		change_filter=filter.ChangeFilter(project=proj,
						branch=branch),
		treeStableTimer=120, builderNames=builders))
    c['schedulers'].append(ForceScheduler(name="Branch %s" % b,
		revision=FixedParameter(name="revision", default=""),
		repository=FixedParameter(name="repository", default=""),
		project=FixedParameter(name="project", default=""),
		branch=FixedParameter(name="branch", default=""),
		reason=FixedParameter(name="reason", default=""),
		properties=[ ],
		builderNames=force_branch))

#
# stable repository updater has its dedicated poller, scheduler,
# build factory, and builder.
#
c['change_source'].append(GitPoller(stable_repo,
	project='stable-updates',
        workdir='stable-updates-workdir',
	branches=stable_upstream_branches,
        pollinterval=571, usetimestamps=False))

c['schedulers'].append(SingleBranchScheduler(
                            name="stable-updater",
                            change_filter=filter.ChangeFilter(project='stable-updates'),
                            treeStableTimer=500,
                            builderNames=["stable-updates"]))

f_stable_update = BuildFactory()
# check out the source
f_stable_update.addStep(Git(repourl=stable_repo,
		branch='master', mode='full', hideStepIf=isSuccess))
# update stable tree
f_stable_update.addStep(ShellCommand(command=["git-push-local.sh"],
		description='updating stable',
		descriptionDone='stable update done',
		haltOnFailure=True,
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))

c['builders'].append(
    BuilderConfig(name="stable-updates",
	slavenames=[ "server" ],
	properties={"priority": 0},
	factory=f_stable_update))

force_updates.append("stable-updates")

#
# master repository updater has its dedicated poller, scheduler,
# build factory, and builder.
# Check hourly, update after it settled down for a day.
#
c['change_source'].append(GitPoller(mainline_repo,
	project='master-updates',
        workdir='master-updates-workdir',
	branch='master',
        pollinterval=3541, usetimestamps=False))

c['schedulers'].append(SingleBranchScheduler(
                            name="master-updater",
                            change_filter=filter.ChangeFilter(project='master-updates'),
                            treeStableTimer=86400,
                            builderNames=["master-updates"]))

f_master_update = BuildFactory()
# check out the source
f_master_update.addStep(Git(repourl=mainline_repo,
		branch='master', mode='full', hideStepIf=isSuccess))
# update master tree
f_master_update.addStep(ShellCommand(command=["git-push-master.sh"],
		description='updating master',
		descriptionDone='master update done',
		haltOnFailure=True,
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))

c['builders'].append(
    BuilderConfig(name="master-updates",
	slavenames=[ "server" ],
	properties={"priority": 0},
	factory=f_master_update))

force_updates.append("master-updates")

#
# stable queue import has its dedicated poller, scheduler,
# build factory, and builder.
#
c['change_source'].append(GitPoller(stable_queue,
	project='stable-queue-import',
        workdir='queue-workdir',
	branches=['master'],
        pollinterval=311, usetimestamps=False))

c['schedulers'].append(SingleBranchScheduler(
                            name="stable-queue-import",
                            change_filter=filter.ChangeFilter(project='stable-queue-import',
			    				branch='master'),
                            treeStableTimer=7200,
                            builderNames=["stable-queue-import"]))

f_queue_import = BuildFactory()
# check out the source
f_queue_import.addStep(Git(repourl=stable_queue,
		branch='master', mode='full', hideStepIf=isSuccess))
# run the build
f_queue_import.addStep(ShellCommand(command=["stable-queue-update.sh"],
		description='updating queue',
		descriptionDone='queue update done',
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))

c['builders'].append(
    BuilderConfig(name="stable-queue-import",
	slavenames=["server"],
	properties={"priority": 1},
	factory=f_queue_import))

force_updates.append("stable-queue-import")

#
# stable queue (3.2) import has its dedicated poller, scheduler,
# build factory, and builder.
#
c['change_source'].append(GitPoller(stable_32_queue,
	project='stable-queue-import-3.2',
        workdir='queue-workdir-3.2',
	branches=['master'],
        pollinterval=337, usetimestamps=False))

c['schedulers'].append(SingleBranchScheduler(
                            name="stable-queue-import-3.2",
                            change_filter=filter.ChangeFilter(project='stable-queue-import-3.2',
			    				branch='master'),
                            treeStableTimer=500,
                            builderNames=["stable-queue-import-3.2"]))

f_queue_import_32 = BuildFactory()
# check out the source
f_queue_import_32.addStep(Git(repourl=stable_32_queue,
		branch='master', mode='full', hideStepIf=isSuccess))
# run the build
f_queue_import_32.addStep(ShellCommand(command=["stable-queue-update.sh", "3.2"],
		description='updating queue [3.2]',
		descriptionDone='queue update done [3.2]',
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))
# Also import 3.16
f_queue_import_32.addStep(ShellCommand(command=["stable-queue-update.sh", "3.16"],
		description='updating queue [3.16]',
		descriptionDone='queue update done [3.16]',
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))

c['builders'].append(
    BuilderConfig(name="stable-queue-import-3.2",
	slavenames=["server"],
	properties={"priority": 1},
	factory=f_queue_import_32))

force_updates.append("stable-queue-import-3.2")

#
# stable queue (3.4) import has its dedicated poller, scheduler,
# build factory, and builder.
#
c['change_source'].append(GitPoller(stable_34_queue,
	project='stable-queue-import-3.4',
        workdir='queue-workdir-3.4',
	branches=['master'],
        pollinterval=359, usetimestamps=False))

c['schedulers'].append(SingleBranchScheduler(
                            name="stable-queue-import-3.4",
                            change_filter=filter.ChangeFilter(project='stable-queue-import-3.4',
						branch='master'),
                            treeStableTimer=3600,
                            builderNames=["stable-queue-import-3.4"]))

f_queue_import_34 = BuildFactory()
# check out the source
f_queue_import_34.addStep(Git(repourl=stable_34_queue,
		branch='master', mode='full', hideStepIf=isSuccess))
# run the build
f_queue_import_34.addStep(ShellCommand(command=["stable-queue-update.sh", "3.4"],
		description='updating queue',
		descriptionDone='queue update done',
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))

c['builders'].append(
    BuilderConfig(name="stable-queue-import-3.4",
	slavenames=["server"],
	properties={"priority": 1},
	factory=f_queue_import_34))

force_updates.append("stable-queue-import-3.4")

#
# stable queue (3.10) import has its dedicated poller, scheduler,
# build factory, and builder.
#
stable_queue_310 = 'git://git.kernel.org/pub/scm/linux/kernel/git/wtarreau/linux-stable.git'

c['change_source'].append(GitPoller(
        stable_queue_310,
	project='stable-queue-import-3.10',
        workdir='queue-workdir-3.10',
	branches=['linux-3.10.y-queue'],
        pollinterval=647, usetimestamps=False))

c['schedulers'].append(SingleBranchScheduler(
                            name="stable-queue-import-3.10",
                            change_filter=filter.ChangeFilter(project='stable-queue-import-3.10',
							      branch='linux-3.10.y-queue'),
                            treeStableTimer=7200,
                            builderNames=["stable-queue-import-3.10"]))

f_queue_import_310 = BuildFactory()
# check out the source
f_queue_import_310.addStep(Git(repourl=stable_queue_310,
		branch='linux-3.10.y-queue', mode='full', hideStepIf=isSuccess))
# import into local stable queue
f_queue_import_310.addStep(ShellCommand(command=["stable-queue-sync.sh", "3.10"],
		description='syncing',
		descriptionDone='sync complete',
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))

c['builders'].append(
    BuilderConfig(name="stable-queue-import-3.10",
	slavenames=["server"],
	properties={"priority": 1},
	factory=f_queue_import_310))

force_updates.append("stable-queue-import-3.10")

#
# stable queue (3.12) import has its dedicated poller, scheduler,
# build factory, and builder.
#
stable_queue_312 = 'git://git.kernel.org/pub/scm/linux/kernel/git/jirislaby/linux-stable.git'

c['change_source'].append(GitPoller(
        stable_queue_312,
	project='stable-queue-import-3.12',
        workdir='queue-workdir-3.12',
	branches=['stable-3.12-queue'],
        pollinterval=617, usetimestamps=False))

c['schedulers'].append(SingleBranchScheduler(
                            name="stable-queue-import-3.12",
                            change_filter=filter.ChangeFilter(project='stable-queue-import-3.12',
			    				branch='stable-3.12-queue'),
                            treeStableTimer=7200,
                            builderNames=["stable-queue-import-3.12"]))

f_queue_import_312 = BuildFactory()
# check out the source
f_queue_import_312.addStep(Git(repourl=stable_queue_312,
		branch='stable-3.12-queue', mode='full', hideStepIf=isSuccess))
# import into local stable queue
f_queue_import_312.addStep(ShellCommand(command=["stable-queue-sync.sh", "3.12"],
		description='syncing',
		descriptionDone='sync complete',
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))

c['builders'].append(
    BuilderConfig(name="stable-queue-import-3.12",
	slavenames=["server"],
	properties={"priority": 1},
	factory=f_queue_import_312))

force_updates.append("stable-queue-import-3.12")

#
# stable queue (3.18) import has its dedicated poller, scheduler,
# build factory, and builder.
#
stable_queue_318 = 'git://git.kernel.org/pub/scm/linux/kernel/git/sashal/linux-stable.git'

c['change_source'].append(GitPoller(
        stable_queue_318,
	project='stable-queue-import-3.18',
        workdir='queue-workdir-3.18',
	branches=['linux-3.18.y-queue', 'linux-4.1.y-queue'],
        pollinterval=647, usetimestamps=False))

c['schedulers'].append(SingleBranchScheduler(
                            name="stable-queue-import-3.18",
                            change_filter=filter.ChangeFilter(project='stable-queue-import-3.18',
							      branch='linux-3.18.y-queue'),
                            treeStableTimer=7200,
                            builderNames=["stable-queue-import-3.18"]))

f_queue_import_318 = BuildFactory()
# check out the source
f_queue_import_318.addStep(Git(repourl=stable_queue_318,
		branch='linux-3.18.y-queue', mode='full', hideStepIf=isSuccess))
# import into local stable queue
f_queue_import_318.addStep(ShellCommand(command=["stable-queue-sync.sh", "3.18"],
		description='syncing',
		descriptionDone='sync complete',
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))
f_queue_import_318.addStep(ShellCommand(command=["stable-queue-sync.sh", "4.1"],
		description='syncing',
		descriptionDone='sync complete',
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))

c['builders'].append(
    BuilderConfig(name="stable-queue-import-3.18",
	slavenames=["server"],
	properties={"priority": 1},
	factory=f_queue_import_318))

force_updates.append("stable-queue-import-3.18")

# c['schedulers'].append(ForceScheduler( name="force", builderNames=force))

c['schedulers'].append(ForceScheduler(name="Forced Updates",
	revision=FixedParameter(name="revision", default=""),
	repository=FixedParameter(name="repository", default=""),
	project=FixedParameter(name="project", default=""),
	branch=FixedParameter(name="branch", default=""),
	reason=FixedParameter(name="reason", default=""),
	properties=[ ],
	builderNames=force_updates))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.HTPasswdAprAuth('/opt/buildbot/.htpasswd'),
    gracefulShutdown = 'auth',
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg,
		   provide_feeds=[ ]))

####### MAIL

from buildbot.status.mail import MailNotifier

mn = MailNotifier(fromaddr="linux@roeck-us.net",
		sendToInterestedUsers=False,
		extraRecipients=['linux@roeck-us.net'],
		builders = [ "stable-queue-import", "stable-updates" ]
	)

c['status'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Linux kernel hwmon and stable-queue builds"
c['titleURL'] = "http://kerneltests.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://server.roeck-us.net:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
