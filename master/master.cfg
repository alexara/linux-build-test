# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

def mergeRequests(builder, req1, req2):
    "any requests with the same branch can be merged"
    return req1.branch == req2.branch

c['mergeRequests'] = mergeRequests

####### Log horizons

c['changeHorizon'] = 200
c['buildHorizon'] = 100
c['eventHorizon'] = 50
c['logHorizon'] = 50

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("server", "MySlav3Pa55W0rd", max_builds=2),
	BuildSlave("saturn", "MySlav3Pa55W0rd", max_builds=1),
	BuildSlave("desktop", "MySlav3Pa55W0rd", max_builds=1),
	BuildSlave("jupiter", "MySlav3Pa55W0rd", max_builds=1),
	BuildSlave("minecraft", "MySlav3Pa55W0rd", max_builds=1)]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []

####### LOCKS

from buildbot import locks

build_lock = locks.SlaveLock("slave_builds", maxCount = 1,
		maxCountForSlave = {
			'server' : 1,
			'saturn' : 1,
			'desktop' : 1,
			'jupiter' : 1,
			'minecraft' : 1
		})

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig

c['builders'] = []

force = []

####### BUILD CONFIGURATION

# hwmon

hwmon_repo = 'git://server.roeck-us.net/git/linux.git'
hwmon_branches = [ 'hwmon', 'hwmon-next', 'hwmon-staging' ]
hwmon_slaves = [ 'server', 'desktop', 'saturn', 'jupiter', 'minecraft' ]

# stable

stable_repo = 'git://server.roeck-us.net/git/linux-stable.git'

stable_branches = [ '3.0', '3.4', '3.10' ]
stable_queue_branches = [ 'linux-3.0.y.queue', 'linux-3.4.y.queue', 'linux-3.10.y.queue' ]
stable_slaves = [ 'server', 'desktop', 'saturn', 'jupiter' ]

qemu_targets_30 = [ 'ppc', 'x86', 'x86_64' ]
qemu_targets_34 = [ 'mips', 'mips64', 'ppc', 'x86', 'x86_64' ]
qemu_targets_310 = [ 'arm', 'mips', 'mips64', 'ppc', 'x86', 'x86_64' ]

# Now put everything together

from buildbot.status.builder import SUCCESS,WARNINGS,FAILURE,EXCEPTION,RETRY,SKIPPED

def prevFailed(step):
    allSteps = step.build.getStatus().getSteps()
    sprev = allSteps[-1]
    for s in allSteps:
        (started, finished) = s.getTimes()
        if started and finished:
            sprev = s
        else:
            break
    result = sprev.getResults()[0]
    return result in (FAILURE, EXCEPTION, RETRY)

def isSkipped(result, s):
     return (result == SKIPPED)

def isSuccess(result, s):
     return (result == SUCCESS)

# hwmon builds

c['change_source'].append(GitPoller(
        hwmon_repo, project='hwmon', workdir='hwmon-workdir',
	branches=hwmon_branches, pollinterval=1057))

for branch in hwmon_branches:
    c['schedulers'].append(SingleBranchScheduler(
		name=branch,
		change_filter=filter.ChangeFilter(project='hwmon', branch=branch),
		treeStableTimer=600,
		builderNames=[ branch ]))
    force.append(branch)
    f = BuildFactory()
    f.addStep(Git(repourl=hwmon_repo, branch=branch, mode='full',
    		hideStepIf=isSuccess))
    f.addStep(ShellCommand(timeout=3600,
		command=["hwmon-build.sh"],
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))
    c['builders'].append(
    	BuilderConfig(name=branch,
		slavenames=hwmon_slaves,
		factory=f,
		locks=[build_lock.access('counting')]))

# stable builds

c['change_source'].append(GitPoller(
        stable_repo, project='stable-queue', workdir='stable-workdir',
	branches=stable_queue_branches, pollinterval=600))

for b in stable_branches:
    builders = []
    branch = "linux-%s.y.queue" % b
    name = "stable-queue-%s" % b
    builders.append(name)
    force.append(name)
    f = BuildFactory()
    f.addStep(Git(repourl=stable_repo, branch=branch, mode='full'))
    f.addStep(ShellCommand(timeout=3600,
		command=["stable-build.sh"],
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))
    c['builders'].append(
    	BuilderConfig(name=name, slavenames=stable_slaves, factory=f,
		locks=[build_lock.access('counting')]))
    qemu_targets = eval("qemu_targets_%s" % b.replace('.', ''))
    for t in qemu_targets:
	f = BuildFactory()
	cmd = "run-qemu-%s.sh" % t
	path = "/opt/buildbot/rootfs/%s:${PATH}" % t
	tname = "qemu-%s-%s" % (t, b)
	builders.append(tname)
	force.append(tname)
	f.addStep(Git(repourl=stable_repo, branch=branch, mode='full',
	haltOnFailure=True, hideStepIf=isSuccess))
	f.addStep(ShellCommand(timeout=1200,
		command=[ cmd ], env={'PATH': path},
		haltOnFailure=False, flunkOnFailure=False))
	f.addStep(ShellCommand(timeout=1200,
		command=[ cmd ], env={'PATH': path}, doStepIf=prevFailed,
		hideStepIf=isSkipped))
	c['builders'].append(
		BuilderConfig(name=tname, slavenames=stable_slaves, factory=f,
			locks=[build_lock.access('counting')]))

    c['schedulers'].append(SingleBranchScheduler(
		name=name,
		change_filter=filter.ChangeFilter(project='stable-queue',
						branch=branch),
		treeStableTimer=120, builderNames=builders))

#
# stable queue import has its dedicated poller, scheduler,
# build factory, and builder.
#
c['change_source'].append(GitPoller(
        'git://git.kernel.org/pub/scm/linux/kernel/git/stable/stable-queue.git',
	project='stable-queue-import',
        workdir='queue-workdir',
	branches=['master'],
        pollinterval=1200))

c['schedulers'].append(SingleBranchScheduler(
                            name="stable-queue-import",
                            change_filter=filter.ChangeFilter(project='stable-queue-import',
			    				branch='master'),
                            treeStableTimer=1800,
                            builderNames=["stable-queue-import"]))

f_queue_import = BuildFactory()
# check out the source
f_queue_import.addStep(Git(repourl='git://git.kernel.org/pub/scm/linux/kernel/git/stable/stable-queue.git',
		branch='master', mode='full', hideStepIf=isSuccess))
# update stable tree
f_queue_import.addStep(ShellCommand(command=["git-push-origin.sh", "/home/groeck/work/linux-stable" ],
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))
# run the build
f_queue_import.addStep(ShellCommand(command=["stable-queue-update.sh"],
		env={'PATH': "/opt/buildbot/bin:${PATH}"}))

c['builders'].append(
    BuilderConfig(name="stable-queue-import",
	slavenames=["server"],
	factory=f_queue_import))

force.append("stable-queue-import")

c['schedulers'].append(ForceScheduler( name="force", builderNames=force))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("nobody","none")]),
    gracefulShutdown = True,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Linux kernel hwmon and stable-queue builds"
c['titleURL'] = "http://server.roeck-us.net:8010"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://server.roeck-us.net:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
